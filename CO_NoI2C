////******************************************************************************
//   CONFIG1
////******************************************************************************

#pragma config FOSC = INTRC_NOCLKOUT  // Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF             // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF            // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF            // RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
#pragma config CP = OFF               // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF            // Brown Out Reset Selection bits (BOR enabled)
#pragma config IESO = OFF             // Internal External Switchover bit (Internal/External Switchover mode is enabled)
#pragma config FCMEN = OFF            // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
#pragma config LVP = OFF              // Low Voltage Programming Enable bit (RB3/PGM pin has PGM function, low voltage programming enabled)

// CONFIG2
#pragma config BOR4V = BOR40V         // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF              // Flash Program Memory Self Write Enable bits (Write protection off)
 
#include <stdint.h>
#include <pic16f887.h>
#include "I2C.h"
#include "ADC.h"
#include <xc.h>

#define _XTAL_FREQ 4000000 

#define MQ7_PIN AN7  // Pin analógico del sensor MQ-7
#define CO_PPM_MAX 255  // Máxima concentración de CO detectada por el sensor MQ-7 (en ppm)
#define VREF 5.0  // Voltaje de referencia para la conversión analógica a digital (ADC

int adc_value = 0;
int co_concentration = 0;
//*****************************************************************************
// Definición de funciones para que se puedan colocar después del main de lo 
// contrario hay que colocarlos todas las funciones antes del main
//*****************************************************************************
void setup(void);
//*****************************************************************************
// Código de Interrupción 

//*****************************************************************************
void __interrupt() isr(void){
  if (PIR1bits.SSPIF == 1) //si se enciende la bandera
    {
        if(I2C_Error_Read() != 0) //rutina para verificar errores
        {
            I2C_Error_Data();
        }
        
        if(I2C_Read_Mode() == 1) //mandar datos
        {
            I2C_Write_Slave(co_concentration); //enviamos el ADC
        }
        PIR1bits.SSPIF = 0; //apagamos la bandera
    }
}
 
void main(void) {
    setup();

    while (1) {
 
        // Lectura del valor analógico del sensor MQ-7
        for (int i = 0; i < 16; i++) { // Realiza una media de 16 muestras
            ADC_Init(AN7); // Inicio de la conversión analógica a digital
            adc_value += ADC_Read(7); // Lectura del valor digitalizado
        }
        adc_value /= 16; // Media de las 16 muestras

        // Cálculo de la concentración de CO en ppm
        float co_voltage = (float) adc_value * VREF / 4096.0; // Conversión del valor digital a voltaje
        int co_concentration = co_voltage * CO_PPM_MAX / 1.4; // Cálculo de la concentración de CO en ppm (basado en la hoja de especificaciones del MQ-7)

    }
    return;
}

void setup(void){
    
    TRISA = 0b01011100; // Puerto A7 como entrada para la lectura del sensor MQ-7
    TRISA = 0; 
    PORTA = 0;
    ANSEL = 0;
    ANSELH = 0;
    OSCCONbits.IRCF2 = 0; // Bit IRCF2 en 0
    OSCCONbits.IRCF1 = 1; // Bit IRCF1 en 1
    OSCCONbits.IRCF0 = 0; // Bit IRCF0 en 0

    I2C_Init_Slave(0x01);
}
